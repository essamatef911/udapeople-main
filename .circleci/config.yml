version: 2.1

orbs: 
    slack: circleci/slack@4.12.1

commands:
  install_awscli:
    description: Install AWScli
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible latest
    steps:
      - run:
          name: Install Ansible latest
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 16
    steps:
      - run:
          name: Install Node.js 16
          command: |
            curl fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
            sudo apt-get install -y node.js
  install_dependencies:
    description: Install dependencies
    steps:
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.Workflow_ID >> "          
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  notify_on_failure:
      steps:
        - slack/notify:
            event: fail
            channel: $SLACK_DEFAULT_CHANNEL
            template: basic_fail_1
  notify_on_success:
      steps:
        - slack/notify:
            event: pass
            channel: $SLACK_DEFAULT_CHANNEL
            template: success_tagged_deployment_1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}

    steps:
      - run:
          name: Revert migrations
          when: on_fail        # Add when this will run
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/rHHiyAHyXFsG4EDRPANWj/migration_<< parameters.Workflow_ID >>)
            
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              echo "$SUCCESS"
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
                        
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm install oauth-sign
            # npm run build
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
             cd frontend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Back-end
          command: |
             cd backend
             npm install
             npm audit fix --force --audit-level=critical
             npm audit fix --force --audit-level=critical
             npm audit --audit-level=critical
             
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
    #  - install_awscli
      - install_dependencies

      - run:
           name: Ensure back-end infrastructure exists
           command: |
             aws cloudformation deploy \
               --template-file .circleci/files/backend.yml \
               --tags project=udapeople \
               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - notify_on_failure      

  configure-infrastructure:
    docker:
      - image:  mareimorsy/aws-node
    steps:
      - checkout
  #    - install_awscli
    # - install_ansible
    #  - install_dependencies            
      - add_ssh_keys:
          fingerprints: ["79:1b:93:8b:e3:ca:fe:be:61:26:31:42:dd:c0:51:cb"]
      - attach_workspace:
           at: ~/
      - run:
          name: Configure server
          command: |
            ls
            pwd
            cd .circleci/ansible
            aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory.txt
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vv
          #  ansible-playbook -i inventory.txt prometheus-exporter.yml -vv
      # Here's where you will add some code to rollback on failure      
      # - destroy-environment     


  run-migrations:
    docker: 
      - image:  mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run premigrations
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            curl --insecure -d '1'  https://kvdb.io/rHHiyAHyXFsG4EDRPANWj/migration_${CIRCLE_WORKFLOW_ID:0:7}
            echo ${CIRCLE_WORKFLOW_ID:0:7}
            echo https://kvdb.io/rHHiyAHyXFsG4EDRPANWj
      - destroy-environment
      - revert-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
#      - install_awscli
#      - install_nodejs
    #  - install_ansible
      - restore_cache:
          keys: [frontend-deps]
      - attach_workspace:
           at: ~/          
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Deploy Frontend
          command: |
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query=Reservations[].Instances[].PublicIpAddress --output text)
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            # Build the frontend
            cd frontend
            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
            npm install
            npm run build:prod
            # aws s3 sync dist s3://udapeople-project
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - destroy-environment  
      # - revert-migrations   
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image:  mareimorsy/aws-node
    steps:
      - checkout
#      - install_awscli
#      - install_ansible
#      - install_nodejs 
     # - install_dependencies             
      - add_ssh_keys:
          fingerprints: ["79:1b:93:8b:e3:ca:fe:be:61:26:31:42:dd:c0:51:cb"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            echo "TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity{.ts,.js}" > .env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> .env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> .env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> .env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> .env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> .env
            echo "TYPEORM_MIGRATIONS_DIR=./dist/migrations" >> .env
            echo "TYPEORM_MIGRATIONS=./dist/migrations/*.ts" >> .env
            tar -czf artifact.tar.gz dist/* package* .env
            cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
            ls ../.circleci/ansible/roles/deploy/
            cd ../.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      #- destroy-environment  
      #- revert-migrations   
 
  smoke-test:
    docker:
      - image:  mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query=Reservations[].Instances[].PublicIpAddress --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl -s "${API_URL}/api/status" | grep "ok"
            then
              echo "It worked!"
              exit 0
            else
              echo "It failed!"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees
            echo ${FRONTEND_URL} 
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              echo "It worked!"
              exit 0
            else
              echo "It failed!"
              exit 1
            fi
      - notify_on_failure
      #- notify_on_success
      #- destroy-environment
      - revert-migrations       

  cloudfront-update:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl -k https://kvdb.io/rHHiyAHyXFsG4EDRPANWj/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      #- destroy-environment
      - revert-migrations

  cleanup:
    docker:
      - image: mareimorsy/aws-node
    steps:
      - checkout
      - run:
          name: Remove old stacks
          command: |
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            export OldWorkflowID=$(curl --insecure https://kvdb.io/rHHiyAHyXFsG4EDRPANWj/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            echo Stack names: "${STACKS[@]}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
